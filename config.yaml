# Copyright 2021 pguimaraes
# See LICENSE file for licensing details.
options:
  distro:
    default: 'confluent'
    type: string
    description: |
      Only two values possible: apache or confluent. Defines if will use apache kafka
      or confluent distro to install kafka packages. Both distro and version
      should be set.
  install_method:
    default: 'package'
    type: string
    description: |
      There are two possible values: package or archive. If archive, it will upload the tarball set
      in the resource of this charm. Archive method is EXPERIMENTAL for this charm.
  version:
    default: '6.1'
    type: string
    description: |
      Sets the kafka version for the given distro.
  keystore-path:
    default: '/var/ssl/private/zookeeper.keystore.jks'
    type: string
    description: |
      Path to the keystore
  truststore-path:
    default: '/var/ssl/private/zookeeper.truststore.jks'
    type: string
    description: |
      Path to the truststore
  quorum-keystore-path:
    default: '/var/ssl/private/zookeeper.quorum.keystore.jks'
    type: string
    description: |
      Path to keystore for quorum
  quorum-truststore-path:
    default: '/var/ssl/private/zookeeper.quorum.truststore.jks'
    type: string
    description: |
      Path to truststore for quorum
  regenerate-keystore-truststore:
    default: False
    type: boolean
    description: |
      If set to True, force charm to regenerate trust and keystore
  ssl_mutual_auth_enabled:
    default: False
    type: boolean
    description: |
      EXPERIMENTAL: this setting is still not enabled by default
  generate-root-ca:
    default: False
    type: string
    description: |
      Generate self-signed cert/key for all certificate endpoints.
  ssl_cert:
    default: ''
    type: string
    description: |
      Certificate + CA chain to be used in base64. Format to be converted should be:
      -----BEGIN CERTIFICATE-----
      <Primary cert in PEM format for your-domain>
      -----END CERTIFICATE-----
      -----BEGIN CERTIFICATE-----
      <First intermediate CA certificate>
      -----END CERTIFICATE-----
      . . . . .
      (there may be more than one intermediate cert)
      . . . . .
      -----BEGIN CERTIFICATE-----
      <root-ca>
      -----END CERTIFICATE-----
      Pass the file with the certificate chain above as:
      $ juju config <your-charm> ssl_cert="$(cat <crt file> | base64 -w0)"
      Or in the bundle, using: include-base64://<path to crt file>
  ssl_key:
    default: ''
    type: string
    description: |
      Key to be used in base64
  ssl-quorum-cert:
    default: ''
    type: string
    description: |
      Certificate + CA chain to be used in base64 for the quorum communication
      -----BEGIN CERTIFICATE-----
      <Primary cert in PEM format for your-domain>
      -----END CERTIFICATE-----
      -----BEGIN CERTIFICATE-----
      <First intermediate CA certificate>
      -----END CERTIFICATE-----
      . . . . .
      (there may be more than one intermediate cert)
      . . . . .
      -----BEGIN CERTIFICATE-----
      <root-ca>
      -----END CERTIFICATE-----
      Pass the file with the certificate chain above as:
      $ juju config <your-charm> ssl_cert="$(cat <crt file> | base64 -w0)"
      Or in the bundle, using: include-base64://<path to crt file>
  ssl-quorum-key:
    default: ''
    type: string
    description: |
      Key to be used in base64
  ssl_quorum:
    default: False
    type: boolean
    description: |
      EXPERIMENTAL: enable sslQuorum (https://zookeeper.apache.org/doc/r3.5.7/zookeeperAdmin.html#Quorum+TLS)
      Which is SSL encryption used for quorum and leader election communication protocols.
      In production, each zookeeper unit should receive its own cert/key pair with CN set for its own $(hostname -f) output.
      One keystore (quorum keystore) is generated to hold both key and cert of sslQuorum; and certs are shared
      across the truststore.
      The charm allows a per-unit set of sslQuorum cert/key pair either using Vault or actions:
      $ juju run-action --wait set-keypair-ssl-quorum cert="$(cat cert | base64 -w0)" key="$(cat key | base64 -w0)"
  mtls-enabled:
    default: False
    type: boolean
    description: |
      EXPERIMENTAL: enable mTLS support
  user:
    default: 'cp-kafka'
    type: string
    description: |
      User set for kafka broker services
  group:
    default: 'confluent'
    type: string
    description: |
      Group set for kafka broker services
  clientPort:
    type: int
    default: 2182
    description: |
      Port to be used to listen for client connections.
      If ssl_cert is specified or certificate relation enabled, then this port is
      configured as secureClientPort instead
  peerPort:
    type: int
    default: 2888
    description: |
      Port to be used to listen for the peers.
  leaderPort:
    type: int
    default: 3888
    description: |
      Port to be used by the leader
  data-device:
    type: string
    default: ""
    description: |
      Device to be used to store the data folder.
      If unset, the folder will be created directly on the rootfs
  data-log-device:
    type: string
    default: ""
    description: |
      Device to be used to store the data-log folder.
      If unset, the folder will be created directly on the rootfs
  fs-options:
    type: string
    description: |
      Filesystem options for data-*-dir options.
  data-log-dir:
    type: string
    default: |
      ext4: "/var/lib/kafka/zookeeper_log"
    description: |
      Transaction log folder. Formatted as YAML as the following example:
      data-log-dir: |
        <fs-type>: <folder-path>
      In case rootfs is chosen, fs option will be ignored
  data-dir:
    type: string
    default: |
      ext4: "/var/lib/zookeeper"
    description: |
      Folder to be used for zookeeper data. Formatted as YAML the same way as data-log-dir
      In case rootfs is chosen, fs option will be ignored
  log4j-root-logger:
    type: string
    default: "INFO, stdout, zkAppender"
    description: |
      Set value for root logger on Zookeeper.
  service-environment-overrides:
    type: string
    description: |
      YAML formatted list of extra arguments to be added to [Environment] field of the service
    default: |
       KAFKA_HEAP_OPTS: "-Xmx1g"
       KAFKA_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/kafka/zookeeper-log4j.properties"
       LOG_DIR: "/var/log/kafka"
  service-unit-overrides:
    type: string
    default: ''
    description: |
      YAML formatted list of extra arguments to be added to [Unit] field of the service
  service-overrides:
    type: string
    description: |
      YAML formatted list of extra arguments to be added to [Service] field of the service.
      User, Group are overrided by the respective configs on the charm.
    default: ''
  zookeeper-properties:
    type: string
    description: |
      Settings to be added to zookeeper.properties file.
      YAML formatted list of items
    default:
      maxClientCnxns: 0
      initLimit: 5
      syncLimit: 2
      autopurge.snapRetainCount: 10
      autopurge.purgeInterval: 1
      admin.enableServer: false
  jmx-exporter-port:
    type: int
    default: 8079
    description: |
      Path to expose prometheus metrics for scraping.      
    
